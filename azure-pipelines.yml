stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: BuildLinux
        timeoutInMinutes: "0"
        pool:
          vmImage: 'ubuntu-18.04'

        variables:
          BUILD_DIR: '$(System.DefaultWorkingDirectory)/build'
          SOURCE_DIR: '$(System.DefaultWorkingDirectory)'
          INSTALL_DIR: '$(System.DefaultWorkingDirectory)/install-azure'
        steps:
          - checkout: self
            submodules: recursive

          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: Add conda to PATH

          - script: |
              mkdir -p $(BUILD_DIR)
              cd $(BUILD_DIR)
              cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) ..
              cmake --build $(BUILD_DIR) --target install --config Release -j 12

          - task: CopyFiles@2
            inputs:
              sourceFolder: '$(INSTALL_DIR)'
              contents: '**'
              targetFolder: '$(Build.ArtifactStagingDirectory)'
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: SRES-linux
              Parallel: true
              ParallelCount: 8

      - job: BuildMac
        timeoutInMinutes: "0"
        pool:
          vmImage: 'macOS-10.15'
        variables:
          BUILD_DIR: '$(System.DefaultWorkingDirectory)/build'
          SOURCE_DIR: '$(System.DefaultWorkingDirectory)'
          INSTALL_DIR: '$(System.DefaultWorkingDirectory)/install-azure'
        steps:
          - checkout: self
            submodules: recursive

          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: Add conda to PATH

          # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
          # We need to take ownership if we want to update conda or install packages globally
          - bash: sudo chown -R $USER $CONDA
            displayName: Take ownership of conda installation

          - script: |
              mkdir -p $(BUILD_DIR)
              cd $(BUILD_DIR)
              cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) ..
              cmake --build $(BUILD_DIR) --target install --config Release -j 12

          - task: CopyFiles@2
            inputs:
              sourceFolder: '$(INSTALL_DIR)'
              contents: '**'
              targetFolder: '$(Build.ArtifactStagingDirectory)'
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: SRES-mac
              Parallel: true
              ParallelCount: 8

      - job: BuildWindows
        timeoutInMinutes: "0"
        pool:
          vmImage: 'windows-2019'
        variables:
          BUILD_DIR: '$(System.DefaultWorkingDirectory)/build'
          SOURCE_DIR: '$(System.DefaultWorkingDirectory)'
          INSTALL_DIR: '$(System.DefaultWorkingDirectory)/install-azure'
        steps:
          - checkout: self
            submodules: recursive

          - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
            displayName: Add conda to PATH

          - powershell: |
              New-Item -ItemType Directory -Force -Path $(BUILD_DIR)
              cd $(BUILD_DIR)
              cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) ..
              cmake --build $(BUILD_DIR) --target install --config Release -j 12

          - task: CopyFiles@2
            inputs:
              sourceFolder: '$(INSTALL_DIR)'
              contents: '**'
              targetFolder: '$(Build.ArtifactStagingDirectory)'
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: SRES-windows
              Parallel: true
              ParallelCount: 8

  - stage: PipWheels
    displayName: Build Pip Wheels
    jobs:
    - job:
      strategy:
        matrix:
          py36:
            PythonVersion: 3.6
            PythonName: py36
          py37:
            PythonVersion: 3.7
            PythonName: py37
          py38:
            PythonVersion: 3.8
            PythonName: py38
          py39:
            PythonVersion: 3.9
            PythonName: py39
      variables:
        MinicondaRoot : '/usr/local/miniconda'
        PythonRoot: '$(MinicondaRoot)/envs/$(PythonName)'
        PythonLibDir: '$(PythonRoot)/lib'
        PythonExecutable: '$(PythonRoot)/bin/python'
        CondaExecutable: '$(MinicondaRoot)/condabin/conda'
        PipExecutable: '$(PythonRoot)/bin/pip'
      steps:
        - bash: echo "##vso[task.prependpath]$CONDA/bin"
          displayName: Add conda to PATH

        - download: current
          artifact: SRES-mac
        # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
        # We need to take ownership if we want to update conda or install packages globally
        - bash: sudo chown -R $USER $CONDA
          displayName: Take ownership of conda installation
        - script: |
            echo "Cd'ing to $(Pipeline.Workspace)/SRES-mac"
            cd $(Pipeline.Workspace)/SRES-mac
            echo "doing a ls"
            ls
            echo "Creating a conda environment"
            $(CondaExecutable) create --quiet --yes --name $(PythonName) python=$(PythonVersion)
            # echo "LD_LIBRARY_PATH $LD_LIBRARY_PATH"
            # export LD_LIBRARY_PATH=$(PythonLibDir)
            echo "Creating a conda environment"
            $(PythonExecutable) setup.py bdist_wheel
            $(PipExecutable) install $(realpath $(ls dist))
            $(PythonExecutable) -c "import sres"

#          - task: CopyFiles@2
#            inputs:
#              contents: '$(INSTALL_DIR)/**'
#              targetFolder: $(Build.ArtifactStagingDirectory)/Install-$(PythonName)
#            displayName: Copy Install Tree to Staging Area
#          - task: CopyFiles@2
#            inputs:
#              contents: '$(INSTALL_DIR)/dist/**'
#              targetFolder: $(Build.ArtifactStagingDirectory)/pip-wheels
#            displayName: Copy Pip Wheels to Staging Area
#          - publish: $(Build.ArtifactStagingDirectory)
#            artifact: PipWheels-$(Agent.OS)-$(PythonName)
#            displayName: Publish Pip Wheels Artifacts


